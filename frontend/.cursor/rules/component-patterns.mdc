---
description: 
globs: *.tsx
alwaysApply: false
---
# Padr√µes de Componentes React

## üìÅ Nomenclatura de Arquivos

- **Kebab Case**: Todos os arquivos `.tsx` devem seguir o padr√£o kebab-case
  ```typescript
  // ‚úÖ Correto
  user-profile.tsx
  form-input.tsx
  navigation-menu.tsx
  
  // ‚ùå Incorreto
  UserProfile.tsx
  formInput.tsx
  NavigationMenu.tsx
  ```

## üèóÔ∏è Estrutura de Componentes

### Export Function (Nunca Arrow Function)
```typescript
// ‚úÖ Correto
export function UserProfile() {
  return <div>...</div>
}

// ‚ùå Incorreto
export const UserProfile = () => {
  return <div>...</div>
}

export default function UserProfile() {
  return <div>...</div>
}
```

### Fun√ß√µes Named (N√£o Arrow Functions)
```typescript
// ‚úÖ Correto
export function UserProfile() {
  function handleSubmit(event: FormEvent) {
    // l√≥gica aqui
  }
  
  function handleInputChange(value: string) {
    // l√≥gica aqui
  }
  
  return <div>...</div>
}

// ‚ùå Incorreto
export function UserProfile() {
  const handleSubmit = (event: FormEvent) => {
    // l√≥gica aqui
  }
  
  return <div>...</div>
}
```

**Exce√ß√£o**: Hooks como `useCallback`, `useEffect`, `useMemo` podem usar arrow functions como par√¢metros.

## üè∑Ô∏è Nomenclatura de Vari√°veis

- **Descritivas**: Use nomes que descrevam claramente o prop√≥sito
```typescript
// ‚úÖ Correto
const [isLoading, setIsLoading] = useState(false)
const [userData, setUserData] = useState(null)
const [formErrors, setFormErrors] = useState({})

// ‚ùå Incorreto
const [loading, setLoading] = useState(false)
const [data, setData] = useState(null)
const [errors, setErrors] = useState({})
```

## üßπ Limpeza de C√≥digo

### Tern√°rios Limitados
```typescript
// ‚úÖ Correto - M√°ximo 1 tern√°rio
{isLoading ? <Spinner /> : <Content />}

// ‚ùå Incorreto - Tern√°rios aninhados
{isLoading ? 
  (hasError ? <Error /> : <Spinner />) : 
  (isSuccess ? <Success /> : <Content />)
}
```

### Separa√ß√£o de Subcomponentes
```typescript
// ‚úÖ Correto - Arquivo separado
// user-profile-header.tsx
export function UserProfileHeader() {
  return <header>...</header>
}

// user-profile.tsx
import { UserProfileHeader } from './user-profile-header'

export function UserProfile() {
  return (
    <div>
      <UserProfileHeader />
      {/* resto do componente */}
    </div>
  )
}

// ‚ùå Incorreto - Subcomponente aninhado
export function UserProfile() {
  function UserProfileHeader() {
    return <header>...</header>
  }
  
  return (
    <div>
      <UserProfileHeader />
    </div>
  )
}
```

## üé® Classes CSS

### Sempre use `cn()` para classes condicionais
```typescript
import { cn } from '@/lib/utils'

// ‚úÖ Correto
<div className={cn(
  "base-class",
  isActive && "active-class",
  isDisabled && "disabled-class"
)}>

// ‚ùå Incorreto
<div className={`base-class ${isActive ? 'active-class' : ''} ${isDisabled ? 'disabled-class' : ''}`}>
```

## üéØ Gerenciamento de Estado

### Minimize useStates
```typescript
// ‚úÖ Correto - Estado consolidado
const [formState, setFormState] = useState({
  name: '',
  email: '',
  isLoading: false,
  errors: {}
})

// ‚ùå Incorreto - Muitos useStates
const [name, setName] = useState('')
const [email, setEmail] = useState('')
const [isLoading, setIsLoading] = useState(false)
const [errors, setErrors] = useState({})
```

## üìù Formul√°rios

### Zod + React Hook Form
```typescript
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { z } from 'zod'

const formSchema = z.object({
  name: z.string().min(1, 'Nome √© obrigat√≥rio'),
  email: z.string().email('Email inv√°lido')
})

export function UserForm() {
  const form = useForm({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: '',
      email: ''
    }
  })
  
  function handleSubmit(data: z.infer<typeof formSchema>) {
    // l√≥gica de submiss√£o
  }
  
  return (
    <form onSubmit={form.handleSubmit(handleSubmit)}>
      {/* campos do formul√°rio */}
    </form>
  )
}
```

## üìã Checklist de Revis√£o

Antes de finalizar um componente, verifique:

- [ ] Arquivo segue kebab-case
- [ ] Usa `export function` (n√£o arrow function)
- [ ] Fun√ß√µes internas s√£o named functions
- [ ] Vari√°veis t√™m nomes descritivos
- [ ] M√°ximo 1 tern√°rio por componente
- [ ] Subcomponentes est√£o em arquivos separados
- [ ] Classes condicionais usam `cn()`
- [ ] Estados est√£o consolidados (m√≠nimo de useStates)
- [ ] Formul√°rios usam Zod + React Hook Form
- [ ] Prefere URL states sobre Context API quando poss√≠vel
