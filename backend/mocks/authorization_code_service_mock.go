// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/aetheris-lab/aetheris-id/api/internal/domain/entities"
	mock "github.com/stretchr/testify/mock"

	models "github.com/aetheris-lab/aetheris-id/api/internal/models"
)

// AuthorizationCodeServiceMock is an autogenerated mock type for the AuthorizationCodeService type
type AuthorizationCodeServiceMock struct {
	mock.Mock
}

type AuthorizationCodeServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthorizationCodeServiceMock) EXPECT() *AuthorizationCodeServiceMock_Expecter {
	return &AuthorizationCodeServiceMock_Expecter{mock: &_m.Mock}
}

// CreateAuthorizationCode provides a mock function with given fields: ctx, input
func (_m *AuthorizationCodeServiceMock) CreateAuthorizationCode(ctx context.Context, input models.CreateAuthorizationCodeInput) (*entities.AuthorizationCode, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for CreateAuthorizationCode")
	}

	var r0 *entities.AuthorizationCode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.CreateAuthorizationCodeInput) (*entities.AuthorizationCode, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.CreateAuthorizationCodeInput) *entities.AuthorizationCode); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.AuthorizationCode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.CreateAuthorizationCodeInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthorizationCodeServiceMock_CreateAuthorizationCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAuthorizationCode'
type AuthorizationCodeServiceMock_CreateAuthorizationCode_Call struct {
	*mock.Call
}

// CreateAuthorizationCode is a helper method to define mock.On call
//   - ctx context.Context
//   - input models.CreateAuthorizationCodeInput
func (_e *AuthorizationCodeServiceMock_Expecter) CreateAuthorizationCode(ctx interface{}, input interface{}) *AuthorizationCodeServiceMock_CreateAuthorizationCode_Call {
	return &AuthorizationCodeServiceMock_CreateAuthorizationCode_Call{Call: _e.mock.On("CreateAuthorizationCode", ctx, input)}
}

func (_c *AuthorizationCodeServiceMock_CreateAuthorizationCode_Call) Run(run func(ctx context.Context, input models.CreateAuthorizationCodeInput)) *AuthorizationCodeServiceMock_CreateAuthorizationCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.CreateAuthorizationCodeInput))
	})
	return _c
}

func (_c *AuthorizationCodeServiceMock_CreateAuthorizationCode_Call) Return(_a0 *entities.AuthorizationCode, _a1 error) *AuthorizationCodeServiceMock_CreateAuthorizationCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthorizationCodeServiceMock_CreateAuthorizationCode_Call) RunAndReturn(run func(context.Context, models.CreateAuthorizationCodeInput) (*entities.AuthorizationCode, error)) *AuthorizationCodeServiceMock_CreateAuthorizationCode_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateAuthorizationCode provides a mock function with given fields: ctx, code, codeVerifier
func (_m *AuthorizationCodeServiceMock) ValidateAuthorizationCode(ctx context.Context, code string, codeVerifier string) (*entities.AuthorizationCode, error) {
	ret := _m.Called(ctx, code, codeVerifier)

	if len(ret) == 0 {
		panic("no return value specified for ValidateAuthorizationCode")
	}

	var r0 *entities.AuthorizationCode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*entities.AuthorizationCode, error)); ok {
		return rf(ctx, code, codeVerifier)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *entities.AuthorizationCode); ok {
		r0 = rf(ctx, code, codeVerifier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.AuthorizationCode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, code, codeVerifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthorizationCodeServiceMock_ValidateAuthorizationCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateAuthorizationCode'
type AuthorizationCodeServiceMock_ValidateAuthorizationCode_Call struct {
	*mock.Call
}

// ValidateAuthorizationCode is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
//   - codeVerifier string
func (_e *AuthorizationCodeServiceMock_Expecter) ValidateAuthorizationCode(ctx interface{}, code interface{}, codeVerifier interface{}) *AuthorizationCodeServiceMock_ValidateAuthorizationCode_Call {
	return &AuthorizationCodeServiceMock_ValidateAuthorizationCode_Call{Call: _e.mock.On("ValidateAuthorizationCode", ctx, code, codeVerifier)}
}

func (_c *AuthorizationCodeServiceMock_ValidateAuthorizationCode_Call) Run(run func(ctx context.Context, code string, codeVerifier string)) *AuthorizationCodeServiceMock_ValidateAuthorizationCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *AuthorizationCodeServiceMock_ValidateAuthorizationCode_Call) Return(_a0 *entities.AuthorizationCode, _a1 error) *AuthorizationCodeServiceMock_ValidateAuthorizationCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthorizationCodeServiceMock_ValidateAuthorizationCode_Call) RunAndReturn(run func(context.Context, string, string) (*entities.AuthorizationCode, error)) *AuthorizationCodeServiceMock_ValidateAuthorizationCode_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthorizationCodeServiceMock creates a new instance of AuthorizationCodeServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthorizationCodeServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthorizationCodeServiceMock {
	mock := &AuthorizationCodeServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
