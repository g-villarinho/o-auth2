// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/aetheris-lab/aetheris-id/api/internal/domain/entities"
	mock "github.com/stretchr/testify/mock"
)

// OTPRepositoryMock is an autogenerated mock type for the OTPRepository type
type OTPRepositoryMock struct {
	mock.Mock
}

type OTPRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *OTPRepositoryMock) EXPECT() *OTPRepositoryMock_Expecter {
	return &OTPRepositoryMock_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, otp
func (_m *OTPRepositoryMock) Create(ctx context.Context, otp *entities.OTP) error {
	ret := _m.Called(ctx, otp)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.OTP) error); ok {
		r0 = rf(ctx, otp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OTPRepositoryMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type OTPRepositoryMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - otp *entities.OTP
func (_e *OTPRepositoryMock_Expecter) Create(ctx interface{}, otp interface{}) *OTPRepositoryMock_Create_Call {
	return &OTPRepositoryMock_Create_Call{Call: _e.mock.On("Create", ctx, otp)}
}

func (_c *OTPRepositoryMock_Create_Call) Run(run func(ctx context.Context, otp *entities.OTP)) *OTPRepositoryMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.OTP))
	})
	return _c
}

func (_c *OTPRepositoryMock_Create_Call) Return(_a0 error) *OTPRepositoryMock_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OTPRepositoryMock_Create_Call) RunAndReturn(run func(context.Context, *entities.OTP) error) *OTPRepositoryMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *OTPRepositoryMock) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OTPRepositoryMock_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type OTPRepositoryMock_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *OTPRepositoryMock_Expecter) Delete(ctx interface{}, id interface{}) *OTPRepositoryMock_Delete_Call {
	return &OTPRepositoryMock_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *OTPRepositoryMock_Delete_Call) Run(run func(ctx context.Context, id string)) *OTPRepositoryMock_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OTPRepositoryMock_Delete_Call) Return(_a0 error) *OTPRepositoryMock_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OTPRepositoryMock_Delete_Call) RunAndReturn(run func(context.Context, string) error) *OTPRepositoryMock_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *OTPRepositoryMock) FindByID(ctx context.Context, id string) (*entities.OTP, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *entities.OTP
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entities.OTP, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.OTP); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.OTP)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OTPRepositoryMock_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type OTPRepositoryMock_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *OTPRepositoryMock_Expecter) FindByID(ctx interface{}, id interface{}) *OTPRepositoryMock_FindByID_Call {
	return &OTPRepositoryMock_FindByID_Call{Call: _e.mock.On("FindByID", ctx, id)}
}

func (_c *OTPRepositoryMock_FindByID_Call) Run(run func(ctx context.Context, id string)) *OTPRepositoryMock_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OTPRepositoryMock_FindByID_Call) Return(_a0 *entities.OTP, _a1 error) *OTPRepositoryMock_FindByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OTPRepositoryMock_FindByID_Call) RunAndReturn(run func(context.Context, string) (*entities.OTP, error)) *OTPRepositoryMock_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCode provides a mock function with given fields: ctx, id, code
func (_m *OTPRepositoryMock) UpdateCode(ctx context.Context, id string, code string) error {
	ret := _m.Called(ctx, id, code)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, id, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OTPRepositoryMock_UpdateCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCode'
type OTPRepositoryMock_UpdateCode_Call struct {
	*mock.Call
}

// UpdateCode is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - code string
func (_e *OTPRepositoryMock_Expecter) UpdateCode(ctx interface{}, id interface{}, code interface{}) *OTPRepositoryMock_UpdateCode_Call {
	return &OTPRepositoryMock_UpdateCode_Call{Call: _e.mock.On("UpdateCode", ctx, id, code)}
}

func (_c *OTPRepositoryMock_UpdateCode_Call) Run(run func(ctx context.Context, id string, code string)) *OTPRepositoryMock_UpdateCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *OTPRepositoryMock_UpdateCode_Call) Return(_a0 error) *OTPRepositoryMock_UpdateCode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OTPRepositoryMock_UpdateCode_Call) RunAndReturn(run func(context.Context, string, string) error) *OTPRepositoryMock_UpdateCode_Call {
	_c.Call.Return(run)
	return _c
}

// NewOTPRepositoryMock creates a new instance of OTPRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOTPRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *OTPRepositoryMock {
	mock := &OTPRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
