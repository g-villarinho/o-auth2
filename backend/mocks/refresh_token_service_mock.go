// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/aetheris-lab/aetheris-id/api/internal/domain/entities"
	mock "github.com/stretchr/testify/mock"
)

// RefreshTokenServiceMock is an autogenerated mock type for the RefreshTokenService type
type RefreshTokenServiceMock struct {
	mock.Mock
}

type RefreshTokenServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *RefreshTokenServiceMock) EXPECT() *RefreshTokenServiceMock_Expecter {
	return &RefreshTokenServiceMock_Expecter{mock: &_m.Mock}
}

// CreateRefreshToken provides a mock function with given fields: ctx, userID, clientID, scopes
func (_m *RefreshTokenServiceMock) CreateRefreshToken(ctx context.Context, userID string, clientID string, scopes []string) (*entities.RefreshToken, error) {
	ret := _m.Called(ctx, userID, clientID, scopes)

	if len(ret) == 0 {
		panic("no return value specified for CreateRefreshToken")
	}

	var r0 *entities.RefreshToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) (*entities.RefreshToken, error)); ok {
		return rf(ctx, userID, clientID, scopes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) *entities.RefreshToken); ok {
		r0 = rf(ctx, userID, clientID, scopes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.RefreshToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []string) error); ok {
		r1 = rf(ctx, userID, clientID, scopes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshTokenServiceMock_CreateRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRefreshToken'
type RefreshTokenServiceMock_CreateRefreshToken_Call struct {
	*mock.Call
}

// CreateRefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - clientID string
//   - scopes []string
func (_e *RefreshTokenServiceMock_Expecter) CreateRefreshToken(ctx interface{}, userID interface{}, clientID interface{}, scopes interface{}) *RefreshTokenServiceMock_CreateRefreshToken_Call {
	return &RefreshTokenServiceMock_CreateRefreshToken_Call{Call: _e.mock.On("CreateRefreshToken", ctx, userID, clientID, scopes)}
}

func (_c *RefreshTokenServiceMock_CreateRefreshToken_Call) Run(run func(ctx context.Context, userID string, clientID string, scopes []string)) *RefreshTokenServiceMock_CreateRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].([]string))
	})
	return _c
}

func (_c *RefreshTokenServiceMock_CreateRefreshToken_Call) Return(_a0 *entities.RefreshToken, _a1 error) *RefreshTokenServiceMock_CreateRefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RefreshTokenServiceMock_CreateRefreshToken_Call) RunAndReturn(run func(context.Context, string, string, []string) (*entities.RefreshToken, error)) *RefreshTokenServiceMock_CreateRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewRefreshTokenServiceMock creates a new instance of RefreshTokenServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRefreshTokenServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *RefreshTokenServiceMock {
	mock := &RefreshTokenServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
