// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/aetheris-lab/aetheris-id/api/internal/domain/entities"
	mock "github.com/stretchr/testify/mock"
)

// AuthorizationCodeRepositoryMock is an autogenerated mock type for the AuthorizationCodeRepository type
type AuthorizationCodeRepositoryMock struct {
	mock.Mock
}

type AuthorizationCodeRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthorizationCodeRepositoryMock) EXPECT() *AuthorizationCodeRepositoryMock_Expecter {
	return &AuthorizationCodeRepositoryMock_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, authorizationCode
func (_m *AuthorizationCodeRepositoryMock) Create(ctx context.Context, authorizationCode *entities.AuthorizationCode) error {
	ret := _m.Called(ctx, authorizationCode)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.AuthorizationCode) error); ok {
		r0 = rf(ctx, authorizationCode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthorizationCodeRepositoryMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type AuthorizationCodeRepositoryMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - authorizationCode *entities.AuthorizationCode
func (_e *AuthorizationCodeRepositoryMock_Expecter) Create(ctx interface{}, authorizationCode interface{}) *AuthorizationCodeRepositoryMock_Create_Call {
	return &AuthorizationCodeRepositoryMock_Create_Call{Call: _e.mock.On("Create", ctx, authorizationCode)}
}

func (_c *AuthorizationCodeRepositoryMock_Create_Call) Run(run func(ctx context.Context, authorizationCode *entities.AuthorizationCode)) *AuthorizationCodeRepositoryMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.AuthorizationCode))
	})
	return _c
}

func (_c *AuthorizationCodeRepositoryMock_Create_Call) Return(_a0 error) *AuthorizationCodeRepositoryMock_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthorizationCodeRepositoryMock_Create_Call) RunAndReturn(run func(context.Context, *entities.AuthorizationCode) error) *AuthorizationCodeRepositoryMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *AuthorizationCodeRepositoryMock) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthorizationCodeRepositoryMock_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type AuthorizationCodeRepositoryMock_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *AuthorizationCodeRepositoryMock_Expecter) Delete(ctx interface{}, id interface{}) *AuthorizationCodeRepositoryMock_Delete_Call {
	return &AuthorizationCodeRepositoryMock_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *AuthorizationCodeRepositoryMock_Delete_Call) Run(run func(ctx context.Context, id string)) *AuthorizationCodeRepositoryMock_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AuthorizationCodeRepositoryMock_Delete_Call) Return(_a0 error) *AuthorizationCodeRepositoryMock_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthorizationCodeRepositoryMock_Delete_Call) RunAndReturn(run func(context.Context, string) error) *AuthorizationCodeRepositoryMock_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindByCode provides a mock function with given fields: ctx, code
func (_m *AuthorizationCodeRepositoryMock) FindByCode(ctx context.Context, code string) (*entities.AuthorizationCode, error) {
	ret := _m.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for FindByCode")
	}

	var r0 *entities.AuthorizationCode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entities.AuthorizationCode, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.AuthorizationCode); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.AuthorizationCode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthorizationCodeRepositoryMock_FindByCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByCode'
type AuthorizationCodeRepositoryMock_FindByCode_Call struct {
	*mock.Call
}

// FindByCode is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
func (_e *AuthorizationCodeRepositoryMock_Expecter) FindByCode(ctx interface{}, code interface{}) *AuthorizationCodeRepositoryMock_FindByCode_Call {
	return &AuthorizationCodeRepositoryMock_FindByCode_Call{Call: _e.mock.On("FindByCode", ctx, code)}
}

func (_c *AuthorizationCodeRepositoryMock_FindByCode_Call) Run(run func(ctx context.Context, code string)) *AuthorizationCodeRepositoryMock_FindByCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AuthorizationCodeRepositoryMock_FindByCode_Call) Return(_a0 *entities.AuthorizationCode, _a1 error) *AuthorizationCodeRepositoryMock_FindByCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthorizationCodeRepositoryMock_FindByCode_Call) RunAndReturn(run func(context.Context, string) (*entities.AuthorizationCode, error)) *AuthorizationCodeRepositoryMock_FindByCode_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthorizationCodeRepositoryMock creates a new instance of AuthorizationCodeRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthorizationCodeRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthorizationCodeRepositoryMock {
	mock := &AuthorizationCodeRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
