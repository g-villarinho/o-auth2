// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/aetheris-lab/aetheris-id/api/internal/domain/entities"
	mock "github.com/stretchr/testify/mock"
)

// ClientRepositoryMock is an autogenerated mock type for the ClientRepository type
type ClientRepositoryMock struct {
	mock.Mock
}

type ClientRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientRepositoryMock) EXPECT() *ClientRepositoryMock_Expecter {
	return &ClientRepositoryMock_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, client
func (_m *ClientRepositoryMock) Create(ctx context.Context, client *entities.Client) error {
	ret := _m.Called(ctx, client)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Client) error); ok {
		r0 = rf(ctx, client)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientRepositoryMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ClientRepositoryMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - client *entities.Client
func (_e *ClientRepositoryMock_Expecter) Create(ctx interface{}, client interface{}) *ClientRepositoryMock_Create_Call {
	return &ClientRepositoryMock_Create_Call{Call: _e.mock.On("Create", ctx, client)}
}

func (_c *ClientRepositoryMock_Create_Call) Run(run func(ctx context.Context, client *entities.Client)) *ClientRepositoryMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.Client))
	})
	return _c
}

func (_c *ClientRepositoryMock_Create_Call) Return(_a0 error) *ClientRepositoryMock_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientRepositoryMock_Create_Call) RunAndReturn(run func(context.Context, *entities.Client) error) *ClientRepositoryMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByClientID provides a mock function with given fields: ctx, clientID
func (_m *ClientRepositoryMock) GetByClientID(ctx context.Context, clientID string) (*entities.Client, error) {
	ret := _m.Called(ctx, clientID)

	if len(ret) == 0 {
		panic("no return value specified for GetByClientID")
	}

	var r0 *entities.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entities.Client, error)); ok {
		return rf(ctx, clientID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.Client); ok {
		r0 = rf(ctx, clientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, clientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientRepositoryMock_GetByClientID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByClientID'
type ClientRepositoryMock_GetByClientID_Call struct {
	*mock.Call
}

// GetByClientID is a helper method to define mock.On call
//   - ctx context.Context
//   - clientID string
func (_e *ClientRepositoryMock_Expecter) GetByClientID(ctx interface{}, clientID interface{}) *ClientRepositoryMock_GetByClientID_Call {
	return &ClientRepositoryMock_GetByClientID_Call{Call: _e.mock.On("GetByClientID", ctx, clientID)}
}

func (_c *ClientRepositoryMock_GetByClientID_Call) Run(run func(ctx context.Context, clientID string)) *ClientRepositoryMock_GetByClientID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ClientRepositoryMock_GetByClientID_Call) Return(_a0 *entities.Client, _a1 error) *ClientRepositoryMock_GetByClientID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientRepositoryMock_GetByClientID_Call) RunAndReturn(run func(context.Context, string) (*entities.Client, error)) *ClientRepositoryMock_GetByClientID_Call {
	_c.Call.Return(run)
	return _c
}

// NewClientRepositoryMock creates a new instance of ClientRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientRepositoryMock {
	mock := &ClientRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
