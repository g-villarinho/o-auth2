// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"

	mock "github.com/stretchr/testify/mock"
)

// AuthMiddlewareMock is an autogenerated mock type for the AuthMiddleware type
type AuthMiddlewareMock struct {
	mock.Mock
}

type AuthMiddlewareMock_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthMiddlewareMock) EXPECT() *AuthMiddlewareMock_Expecter {
	return &AuthMiddlewareMock_Expecter{mock: &_m.Mock}
}

// AttachUserClaimsIfAuthenticated provides a mock function with no fields
func (_m *AuthMiddlewareMock) AttachUserClaimsIfAuthenticated() echo.MiddlewareFunc {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AttachUserClaimsIfAuthenticated")
	}

	var r0 echo.MiddlewareFunc
	if rf, ok := ret.Get(0).(func() echo.MiddlewareFunc); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(echo.MiddlewareFunc)
		}
	}

	return r0
}

// AuthMiddlewareMock_AttachUserClaimsIfAuthenticated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AttachUserClaimsIfAuthenticated'
type AuthMiddlewareMock_AttachUserClaimsIfAuthenticated_Call struct {
	*mock.Call
}

// AttachUserClaimsIfAuthenticated is a helper method to define mock.On call
func (_e *AuthMiddlewareMock_Expecter) AttachUserClaimsIfAuthenticated() *AuthMiddlewareMock_AttachUserClaimsIfAuthenticated_Call {
	return &AuthMiddlewareMock_AttachUserClaimsIfAuthenticated_Call{Call: _e.mock.On("AttachUserClaimsIfAuthenticated")}
}

func (_c *AuthMiddlewareMock_AttachUserClaimsIfAuthenticated_Call) Run(run func()) *AuthMiddlewareMock_AttachUserClaimsIfAuthenticated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AuthMiddlewareMock_AttachUserClaimsIfAuthenticated_Call) Return(_a0 echo.MiddlewareFunc) *AuthMiddlewareMock_AttachUserClaimsIfAuthenticated_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthMiddlewareMock_AttachUserClaimsIfAuthenticated_Call) RunAndReturn(run func() echo.MiddlewareFunc) *AuthMiddlewareMock_AttachUserClaimsIfAuthenticated_Call {
	_c.Call.Return(run)
	return _c
}

// EnsureAuthenticated provides a mock function with no fields
func (_m *AuthMiddlewareMock) EnsureAuthenticated() echo.MiddlewareFunc {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EnsureAuthenticated")
	}

	var r0 echo.MiddlewareFunc
	if rf, ok := ret.Get(0).(func() echo.MiddlewareFunc); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(echo.MiddlewareFunc)
		}
	}

	return r0
}

// AuthMiddlewareMock_EnsureAuthenticated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnsureAuthenticated'
type AuthMiddlewareMock_EnsureAuthenticated_Call struct {
	*mock.Call
}

// EnsureAuthenticated is a helper method to define mock.On call
func (_e *AuthMiddlewareMock_Expecter) EnsureAuthenticated() *AuthMiddlewareMock_EnsureAuthenticated_Call {
	return &AuthMiddlewareMock_EnsureAuthenticated_Call{Call: _e.mock.On("EnsureAuthenticated")}
}

func (_c *AuthMiddlewareMock_EnsureAuthenticated_Call) Run(run func()) *AuthMiddlewareMock_EnsureAuthenticated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AuthMiddlewareMock_EnsureAuthenticated_Call) Return(_a0 echo.MiddlewareFunc) *AuthMiddlewareMock_EnsureAuthenticated_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthMiddlewareMock_EnsureAuthenticated_Call) RunAndReturn(run func() echo.MiddlewareFunc) *AuthMiddlewareMock_EnsureAuthenticated_Call {
	_c.Call.Return(run)
	return _c
}

// EnsureOTPAuthenticated provides a mock function with no fields
func (_m *AuthMiddlewareMock) EnsureOTPAuthenticated() echo.MiddlewareFunc {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EnsureOTPAuthenticated")
	}

	var r0 echo.MiddlewareFunc
	if rf, ok := ret.Get(0).(func() echo.MiddlewareFunc); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(echo.MiddlewareFunc)
		}
	}

	return r0
}

// AuthMiddlewareMock_EnsureOTPAuthenticated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnsureOTPAuthenticated'
type AuthMiddlewareMock_EnsureOTPAuthenticated_Call struct {
	*mock.Call
}

// EnsureOTPAuthenticated is a helper method to define mock.On call
func (_e *AuthMiddlewareMock_Expecter) EnsureOTPAuthenticated() *AuthMiddlewareMock_EnsureOTPAuthenticated_Call {
	return &AuthMiddlewareMock_EnsureOTPAuthenticated_Call{Call: _e.mock.On("EnsureOTPAuthenticated")}
}

func (_c *AuthMiddlewareMock_EnsureOTPAuthenticated_Call) Run(run func()) *AuthMiddlewareMock_EnsureOTPAuthenticated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AuthMiddlewareMock_EnsureOTPAuthenticated_Call) Return(_a0 echo.MiddlewareFunc) *AuthMiddlewareMock_EnsureOTPAuthenticated_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthMiddlewareMock_EnsureOTPAuthenticated_Call) RunAndReturn(run func() echo.MiddlewareFunc) *AuthMiddlewareMock_EnsureOTPAuthenticated_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthMiddlewareMock creates a new instance of AuthMiddlewareMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthMiddlewareMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthMiddlewareMock {
	mock := &AuthMiddlewareMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
