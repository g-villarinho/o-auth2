// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/aetheris-lab/aetheris-id/api/internal/domain/entities"
	mock "github.com/stretchr/testify/mock"

	models "github.com/aetheris-lab/aetheris-id/api/internal/models"
)

// ClientServiceMock is an autogenerated mock type for the ClientService type
type ClientServiceMock struct {
	mock.Mock
}

type ClientServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientServiceMock) EXPECT() *ClientServiceMock_Expecter {
	return &ClientServiceMock_Expecter{mock: &_m.Mock}
}

// CreateClient provides a mock function with given fields: ctx, name, description, redirectURIs, grantTypes
func (_m *ClientServiceMock) CreateClient(ctx context.Context, name string, description string, redirectURIs []string, grantTypes []string) (*models.ClientResponse, error) {
	ret := _m.Called(ctx, name, description, redirectURIs, grantTypes)

	if len(ret) == 0 {
		panic("no return value specified for CreateClient")
	}

	var r0 *models.ClientResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string, []string) (*models.ClientResponse, error)); ok {
		return rf(ctx, name, description, redirectURIs, grantTypes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string, []string) *models.ClientResponse); ok {
		r0 = rf(ctx, name, description, redirectURIs, grantTypes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ClientResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []string, []string) error); ok {
		r1 = rf(ctx, name, description, redirectURIs, grantTypes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientServiceMock_CreateClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateClient'
type ClientServiceMock_CreateClient_Call struct {
	*mock.Call
}

// CreateClient is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - description string
//   - redirectURIs []string
//   - grantTypes []string
func (_e *ClientServiceMock_Expecter) CreateClient(ctx interface{}, name interface{}, description interface{}, redirectURIs interface{}, grantTypes interface{}) *ClientServiceMock_CreateClient_Call {
	return &ClientServiceMock_CreateClient_Call{Call: _e.mock.On("CreateClient", ctx, name, description, redirectURIs, grantTypes)}
}

func (_c *ClientServiceMock_CreateClient_Call) Run(run func(ctx context.Context, name string, description string, redirectURIs []string, grantTypes []string)) *ClientServiceMock_CreateClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].([]string), args[4].([]string))
	})
	return _c
}

func (_c *ClientServiceMock_CreateClient_Call) Return(_a0 *models.ClientResponse, _a1 error) *ClientServiceMock_CreateClient_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientServiceMock_CreateClient_Call) RunAndReturn(run func(context.Context, string, string, []string, []string) (*models.ClientResponse, error)) *ClientServiceMock_CreateClient_Call {
	_c.Call.Return(run)
	return _c
}

// GetClientByClientID provides a mock function with given fields: ctx, clientID
func (_m *ClientServiceMock) GetClientByClientID(ctx context.Context, clientID string) (*entities.Client, error) {
	ret := _m.Called(ctx, clientID)

	if len(ret) == 0 {
		panic("no return value specified for GetClientByClientID")
	}

	var r0 *entities.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entities.Client, error)); ok {
		return rf(ctx, clientID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.Client); ok {
		r0 = rf(ctx, clientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, clientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientServiceMock_GetClientByClientID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClientByClientID'
type ClientServiceMock_GetClientByClientID_Call struct {
	*mock.Call
}

// GetClientByClientID is a helper method to define mock.On call
//   - ctx context.Context
//   - clientID string
func (_e *ClientServiceMock_Expecter) GetClientByClientID(ctx interface{}, clientID interface{}) *ClientServiceMock_GetClientByClientID_Call {
	return &ClientServiceMock_GetClientByClientID_Call{Call: _e.mock.On("GetClientByClientID", ctx, clientID)}
}

func (_c *ClientServiceMock_GetClientByClientID_Call) Run(run func(ctx context.Context, clientID string)) *ClientServiceMock_GetClientByClientID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ClientServiceMock_GetClientByClientID_Call) Return(_a0 *entities.Client, _a1 error) *ClientServiceMock_GetClientByClientID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientServiceMock_GetClientByClientID_Call) RunAndReturn(run func(context.Context, string) (*entities.Client, error)) *ClientServiceMock_GetClientByClientID_Call {
	_c.Call.Return(run)
	return _c
}

// NewClientServiceMock creates a new instance of ClientServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientServiceMock {
	mock := &ClientServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
