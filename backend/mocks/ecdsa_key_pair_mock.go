// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	ecdsa "crypto/ecdsa"

	mock "github.com/stretchr/testify/mock"
)

// EcdsaKeyPairMock is an autogenerated mock type for the EcdsaKeyPair type
type EcdsaKeyPairMock struct {
	mock.Mock
}

type EcdsaKeyPairMock_Expecter struct {
	mock *mock.Mock
}

func (_m *EcdsaKeyPairMock) EXPECT() *EcdsaKeyPairMock_Expecter {
	return &EcdsaKeyPairMock_Expecter{mock: &_m.Mock}
}

// ParseECDSAPrivateKey provides a mock function with no fields
func (_m *EcdsaKeyPairMock) ParseECDSAPrivateKey() (*ecdsa.PrivateKey, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ParseECDSAPrivateKey")
	}

	var r0 *ecdsa.PrivateKey
	var r1 error
	if rf, ok := ret.Get(0).(func() (*ecdsa.PrivateKey, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *ecdsa.PrivateKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecdsa.PrivateKey)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EcdsaKeyPairMock_ParseECDSAPrivateKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseECDSAPrivateKey'
type EcdsaKeyPairMock_ParseECDSAPrivateKey_Call struct {
	*mock.Call
}

// ParseECDSAPrivateKey is a helper method to define mock.On call
func (_e *EcdsaKeyPairMock_Expecter) ParseECDSAPrivateKey() *EcdsaKeyPairMock_ParseECDSAPrivateKey_Call {
	return &EcdsaKeyPairMock_ParseECDSAPrivateKey_Call{Call: _e.mock.On("ParseECDSAPrivateKey")}
}

func (_c *EcdsaKeyPairMock_ParseECDSAPrivateKey_Call) Run(run func()) *EcdsaKeyPairMock_ParseECDSAPrivateKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EcdsaKeyPairMock_ParseECDSAPrivateKey_Call) Return(_a0 *ecdsa.PrivateKey, _a1 error) *EcdsaKeyPairMock_ParseECDSAPrivateKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EcdsaKeyPairMock_ParseECDSAPrivateKey_Call) RunAndReturn(run func() (*ecdsa.PrivateKey, error)) *EcdsaKeyPairMock_ParseECDSAPrivateKey_Call {
	_c.Call.Return(run)
	return _c
}

// ParseECDSAPublicKey provides a mock function with no fields
func (_m *EcdsaKeyPairMock) ParseECDSAPublicKey() (*ecdsa.PublicKey, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ParseECDSAPublicKey")
	}

	var r0 *ecdsa.PublicKey
	var r1 error
	if rf, ok := ret.Get(0).(func() (*ecdsa.PublicKey, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *ecdsa.PublicKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecdsa.PublicKey)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EcdsaKeyPairMock_ParseECDSAPublicKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseECDSAPublicKey'
type EcdsaKeyPairMock_ParseECDSAPublicKey_Call struct {
	*mock.Call
}

// ParseECDSAPublicKey is a helper method to define mock.On call
func (_e *EcdsaKeyPairMock_Expecter) ParseECDSAPublicKey() *EcdsaKeyPairMock_ParseECDSAPublicKey_Call {
	return &EcdsaKeyPairMock_ParseECDSAPublicKey_Call{Call: _e.mock.On("ParseECDSAPublicKey")}
}

func (_c *EcdsaKeyPairMock_ParseECDSAPublicKey_Call) Run(run func()) *EcdsaKeyPairMock_ParseECDSAPublicKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EcdsaKeyPairMock_ParseECDSAPublicKey_Call) Return(_a0 *ecdsa.PublicKey, _a1 error) *EcdsaKeyPairMock_ParseECDSAPublicKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EcdsaKeyPairMock_ParseECDSAPublicKey_Call) RunAndReturn(run func() (*ecdsa.PublicKey, error)) *EcdsaKeyPairMock_ParseECDSAPublicKey_Call {
	_c.Call.Return(run)
	return _c
}

// NewEcdsaKeyPairMock creates a new instance of EcdsaKeyPairMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEcdsaKeyPairMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *EcdsaKeyPairMock {
	mock := &EcdsaKeyPairMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
